# -*- coding: utf-8 -*-

"""

Файл pulsar_stars (pulsar_stars_new.csv) содержит сведения о звездах, полученные в ходе исследовании вселенной
(High Time Resolution Universe Survey) с целью определения одного из типа нейтронных звезд — пульсаров.

Набор данных состоит из 17 898 наблюдей, среди них 1 639 — пульсары. По каждому наблюдению доступно 8
непрерывных предикторов: среднее значение интегрального профиля; стандартное отклонение
интегрального профиля; избыточный эксцесс интегрального профиля; асимметрия интегрального профиля;
среднее значение кривой DM-SNR; стандартное отклонение кривой DM-SNR; избыточный эксцесс кривой DM-SNR;
асимметрия кривой DM-SNR и бинарный отклик.

Итак, столбец TARGET (TG) является откликом, все остальные поля — предикторами.

Получите выборку, элементы которой удовлетворяют следующим критериям:
Все строки, где TG = 0 и MIP ∈ [104.1953125, 104.5859375];
Все строки, где TG = 1 и MIP ∈ [101.9609375, 115.3515625].
1) Укажите число строк в полученной выборке.

2) Выполните линейную нормировку всех значений предикторов полученной выборки.
Определите выборочное среднее для столбца MIP после нормировки.

3) Обучите модель логистической регрессии, используя полученную после нормировки выборку в качестве
тренировочного набора данных. Используйте следующие параметры:
В Python, используйте модель с параметрами:
LogisticRegression(random_state=17, solver='lbfgs').

4) Проведите классификацию новой звезды с параметрами:
[0.163, 0.185, 0.299, 0.421, 0.276, 0.436, 0.62, 0.25]
Введите вероятность отнесения звезды к классу пульсар.

5) Проведите классификацию новой звезды при помощи метода k-ближайших соседей. В качестве
обучающего набора данных используйте полученную в п.2 нормализованную выборку.

Введите расстояние от новой звезды до ближайшего соседа, используя Евклидову метрику.

Определите, сколько пульсаров располагается рядом с новой звездой, если k=20 и используется Евклидова метрика.
"""

import numpy as np
import pandas as pd
from sklearn import preprocessing, linear_model, neighbors

# чтение данных
data = pd.read_csv('pulsar_stars_new.csv', delimiter=',')

# кол-во пульсаров
print('pulsars len:', len(data.loc[(data['TG'] == 1)]))

# новая выборка по условиям задачи
new_data = data.loc[((data['TG'] == 0) & (data['MIP'] >= 104.1953125) & (data['MIP'] <= 104.5859375)) | (
                    ((data['TG'] == 1) & (data['MIP'] >= 101.9609375) & (data['MIP'] <= 115.3515625)))]

# число строк новой выборки
print('new len:', len(new_data))

# отбор данных для предикторов, удаление столбца TARGET (TG)
X = pd.DataFrame(new_data.drop(['TG'], axis=1))

# столбец отклика
Y = pd.DataFrame(new_data['TG']).values.ravel()

# столбец отклика в list()
tg = new_data['TG'].tolist()

# линейная нормировка всех значений предикторов
linear_norm = preprocessing.MinMaxScaler().fit_transform(X)
X_norm = pd.DataFrame(linear_norm, columns=X.columns)

# выборочное среднее для столбца MIP после нормировки
print('AVG MIP norm:', round(float(np.mean(list(X_norm['MIP']))), 3))

# обучение модели логистической регрессии
log_reg = linear_model.LogisticRegression(random_state=17, solver='lbfgs').fit(X_norm, Y)

# вероятность отнесения новой звезды к классу пульсар
star_class = 1  # 1 - звезда является пульсаром, 0 - звезда не является пульсаром
new_star = [0.163, 0.185, 0.299, 0.421, 0.276, 0.436, 0.62, 0.25]
new_star_pred = log_reg.predict_proba([new_star])
print('New Star:', round(float(new_star_pred.tolist()[0][star_class]), 3))

# расстояние от новой звезды до ближайшего соседа и кол-во пульсаров рядом с новой звездой
# при k=20 и евклидовой метрике
neighs = neighbors.KNeighborsClassifier(n_neighbors=20, p=2)
neighs.fit(X_norm, Y)
neigh_kn = neighs.kneighbors([new_star])
neigh_indexes = neigh_kn[1][0].tolist()
neigh_len = len(list(tg[i] for i in neigh_indexes if tg[i] == star_class))
print('New Star neighbor:', round(neigh_kn[0][0].tolist()[0], 3))
print('Len of pulsars neighbors:', neigh_len)
